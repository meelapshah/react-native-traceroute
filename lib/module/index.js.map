{"version":3,"sources":["index.tsx"],"names":["NativeEventEmitter","NativeModules","TracerouteUpdateEvent","TracerouteModule","TracerouteEventEmitter","undefined","tracerouteInProgress","Traceroute","address","probeType","onUpdate","Error","console","error","listener","evt","done","removeListener","addListener","doTraceroute"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,aAA7B,QAAkD,cAAlD;AAOA,MAAMC,qBAAqB,GAAG,uBAA9B;AAEA,MAAMC,gBAAgB,GAAGF,aAAa,CAACE,gBAAvC;AAEA,MAAMC,sBAAsB,GAAGD,gBAAgB,GAC3C,IAAIH,kBAAJ,CAAuBG,gBAAvB,CAD2C,GAE3CE,SAFJ;AAIA,IAAIC,oBAA6B,GAAG,KAApC;AAEA,OAAO,eAAeC,UAAf,CACLC,OADK,EAELC,SAFK,EAGLC,QAHK,EAIU;AACf,MAAI,CAACP,gBAAL,EAAuB;AACrB,UAAM,IAAIQ,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,MAAIL,oBAAJ,EAA0B;AACxBM,IAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;AACA,UAAM,IAAIF,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACDL,EAAAA,oBAAoB,GAAG,IAAvB;;AACA,QAAMQ,QAAQ,GAAIC,GAAD,IAA2B;AAC1CL,IAAAA,QAAQ,CAACK,GAAD,CAAR;;AACA,QAAIA,GAAG,CAACC,IAAR,EAAc;AACZV,MAAAA,oBAAoB,GAAG,KAAvB;AACAF,MAAAA,sBAAsB,CAACa,cAAvB,CAAsCf,qBAAtC,EAA6DY,QAA7D;AACD;AACF,GAND;;AAOAV,EAAAA,sBAAsB,CAACc,WAAvB,CAAmChB,qBAAnC,EAA0DY,QAA1D;AACA,QAAMX,gBAAgB,CAACgB,YAAjB,CAA8BX,OAA9B,EAAuCC,SAAvC,CAAN;AACD;AAED,eAAeF,UAAf","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\n\nexport interface TracerouteResult {\n  output: string;\n  done: boolean;\n}\n\nconst TracerouteUpdateEvent = \"tracerouteUpdateEvent\";\n\nconst TracerouteModule = NativeModules.TracerouteModule;\n\nconst TracerouteEventEmitter = TracerouteModule\n  ? new NativeEventEmitter(TracerouteModule)\n  : undefined;\n\nlet tracerouteInProgress: boolean = false;\n\nexport async function Traceroute(\n  address: string,\n  probeType: \"udp\" | \"icmp\",\n  onUpdate: (result: TracerouteResult) => void\n): Promise<void> {\n  if (!TracerouteModule) {\n    throw new Error(\"No traceroute module.\");\n  }\n  if (tracerouteInProgress) {\n    console.error(\"rejecting, in progress\");\n    throw new Error(\"Traceroute in progress.\");\n  }\n  tracerouteInProgress = true;\n  const listener = (evt: TracerouteResult) => {\n    onUpdate(evt);\n    if (evt.done) {\n      tracerouteInProgress = false;\n      TracerouteEventEmitter.removeListener(TracerouteUpdateEvent, listener);\n    }\n  };\n  TracerouteEventEmitter.addListener(TracerouteUpdateEvent, listener);\n  await TracerouteModule.doTraceroute(address, probeType)\n}\n\nexport default Traceroute;\n"]}